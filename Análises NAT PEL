#load packages
library(pacman)
pacman::p_load(vcfR, adegenet, haplo.stats, tibble, tidyr, dplyr, string, clipr, openxlsx, readxl)


# Importar vcf pro R
vcfCYP2C18_NAT <- read.vcfR(file.choose())

# Extrair genotype data em dataframe
gtNAT <- extract.gt(vcfCYP2C18_NAT, element = "GT")
gtNAT2 <- as.data.frame(gtNAT)
gtNAT2 <- gtNAT2 %>% rownames_to_column(var = "SNPs")
class(gtNAT2$SNPs)

# SNPs do haplótipo = rs2860840.T e o rs11188059.G
SNPsfiltradosNAT <- gtNAT2 %>% 
  filter(SNPs %in% c('rs11188059', 'rs2860840'))

# Transpor para depois adicionar populações
SNPsfiltradosNAT2 <- as.data.frame(t(SNPsfiltradosNAT))
SNPsfiltradosNAT2 <- tibble::rownames_to_column(SNPsfiltradosNAT2,"ID")

# Renomeei as colunas e removi a linha 1
colnames(SNPsfiltradosNAT2) <- c("ID", "rs11188059", "rs2860840")
SNPsfiltradosNAT2 <- SNPsfiltradosNAT2 [-1,]

write.xlsx(SNPsfiltradosNAT2, 'SNPsNAT.xlsx')


# ----------------------- Haplo.stats ----------------------- 
# No haplo.em

# Separando os alelos em duas colunas
SNPsseparadosNAT <- SNPsfiltradosNAT2 %>% 
  separate_wider_delim(rs11188059, "/", names = c("rs11188059_1", "rs11188059_2")) %>%
  separate_wider_delim(rs2860840, "/", names = c("rs2860840_1", "rs2860840_2"))


# Removi coluna "ID" (o comando pede só as colunas com os alelos)

SNPsNATSemID <- SNPsseparadosNAT
SNPsNATSemID$ID <- NULL

SNPsNATSemID2 <- SNPsNATSemID      #backup pra garantir


# !!! No vcf dos nativos, os alelos referencia e mutante estavam invertidos para o rs2860840 !!!
# Trocando 0 = G / 1 = A no rs11188059
for (i in 1:nrow(SNPsNATSemID2)) {
  if (SNPsNATSemID2[i, 1] == 0) {SNPsNATSemID2[i, 1] <- "G"}}

for (i in 1:nrow(SNPsNATSemID2)) {
  if (SNPsNATSemID2[i, 1] == 1) {SNPsNATSemID2[i, 1] <- "A"}}

for (i in 1:nrow(SNPsNATSemID2)) {
  if (SNPsNATSemID2[i, 2] == 0) {SNPsNATSemID2[i, 2] <- "G"}}

for (i in 1:nrow(SNPsNATSemID2)) {
  if (SNPsNATSemID2[i, 2] == 1) {SNPsNATSemID2[i, 2] <- "A"}}

# Trocando 0 = T / 1 = C no rs2860840
for (i in 1:nrow(SNPsNATSemID2)) {
  if (SNPsNATSemID2[i, 3] == 0) {SNPsNATSemID2[i, 3] <- "T"}}

for (i in 1:nrow(SNPsNATSemID2)) {
  if (SNPsNATSemID2[i, 3] == 1) {SNPsNATSemID2[i, 3] <- "C"}}

for (i in 1:nrow(SNPsNATSemID2)) {
  if (SNPsNATSemID2[i, 4] == 0) {SNPsNATSemID2[i, 4] <- "T"}}

for (i in 1:nrow(SNPsNATSemID2)) {
  if (SNPsNATSemID2[i, 4] == 1) {SNPsNATSemID2[i, 4] <- "C"}}


# Rodar o comando do phasing
resulthaploNAT <- haplo.em(as.matrix(SNPsNATSemID2), locus.label = c('rs11188059', 'rs2860840'), miss.val=NA)

resultadoNAT <- summary(resulthaploNAT)

# Salvar
write.xlsx(resultadoNAT, 'resultadoNAT.xlsx', rowNames = F)



# ----------------------- Cálculo de frequências -----------------------

# input da tabela Resultados NATperuanos
library(readxl)
POPNAT <- read_xlsx(choose.files(), sheet = "NAT")


# Criar um vetor com o nome de todas as populações. 
lista_popNAT <- c ('CHOPCCAS', 'CUSCO', 'IQUITOS', 'MATZES', 'MOCHES', 'TRUJILLO', 'UROS')
lista_popNAT <- c ('CHO', 'CUS', 'IQUI', 'MATZ', 'MOCH', 'TRUJ', 'UROS')


# Criar uma nova coluna com os valores das colunas POP e FREQ, separados por espaço
POPNAT$geno <- apply(POPNAT[,3:4], 1, paste, collapse = ' ')
POPNAT2 <- POPNAT[,c(2,5)]


# Cálculo da frequência
pop_genindNAT <- df2genind(X = POPNAT2, pop = POPNAT2$POP, sep = ' ', ploidy = 2, ncode = 2) #converte o bando de dados que temos em genind 
pop_genpopNAT <- genind2genpop(pop_genindNAT) #converte o genind em genpop 
freqNAT <- makefreq (pop_genpopNAT, quiet = FALSE, missing = NA, truenames = TRUE) #calcula a frequencia da populaçao

freqNAT <- as.data.frame(freqNAT)

write.xlsx(freqNAT, 'freqNAT.xlsx', colNames = TRUE, rowNames = TRUE)



# ----------------------- Regressão -----------------------

# Lê o arquivo da Frequência e cria uma lista com os SNPs
df <- read.xlsx(file.choose())


# Lista de SNPs
lista_snps <- setdiff(names(df), c("POP", "ANAT", "SAS", "WAFR", "EASW", 
                                   "SEUR", "CNAT", "NEUR", "EAFR", "EASE"))



calcular_correlacoes <- function(arquivo_excel, lista_snps) {
  resultados <- list()
  
  for (snp in lista_snps) {
    # Verifica se o SNP é numérico e converte se necessário
    if (!is.numeric(df[[snp]])) {
      df[[snp]] <- as.numeric(df[[snp]])
    }
    
    # Cria data frame das ancestralidades e assegura tipos numéricos
    media_k9 <- data.frame(ANAT = as.numeric(df$ANAT), 
                           SAS = as.numeric(df$SAS), 
                           WAFR = as.numeric(df$WAFR), 
                           EASW = as.numeric(df$EASW),
                           SEUR = as.numeric(df$SEUR), 
                           NAT = as.numeric(df$CNAT), 
                           NEUR = as.numeric(df$NEUR), 
                           EAFR = as.numeric(df$EAFR), 
                           EASE = as.numeric(df$EASE))
    lista_ances <- names(media_k9)
    
    resultados_df <- data.frame(SNP = character(), 
                                Beta = numeric(), 
                                p_regr = numeric(),
                                p_adj = numeric(),
                                R_sqr_ajustado = numeric(), 
                                Ancestralidade = character(),
                                stringsAsFactors = FALSE)
    
    p_values <- numeric() # Lista para armazenar p-values antes da correção
    
    for (nome in lista_ances) {
      reg_model <- lm(df[[snp]] ~ media_k9[[nome]])
      summary_reg <- summary(reg_model)
      
      # Verifica se há coeficientes válidos
      if (nrow(summary_reg$coefficients) > 1) {
        beta <- summary_reg$coefficients[2, "Estimate"]
        p_value <- summary_reg$coefficients[2, "Pr(>|t|)"]
        adjusted_r_squared <- summary_reg$adj.r.squared
      } else {
        beta <- NA
        p_value <- NA
        adjusted_r_squared <- NA
      }
      
      p_values <- c(p_values, p_value) # Armazena p-values
      
      resultados_df <- rbind(resultados_df, 
                             data.frame(SNP = snp, 
                                        Ancestralidade = nome,
                                        Beta = beta,
                                        p_adj = NA, # Placeholder
                                        R_sqr_ajustado = adjusted_r_squared,
                                        p_regr = p_value))
    }
    
    # Bonferroni correction
    p_adj_values <- p.adjust(p_values, method = "bonferroni")
    resultados_df$p_adj <- p_adj_values
    
    resultados[[snp]] <- resultados_df
  }
  
  return(resultados)
}

# Chama a função e armazena o resultado
resultados <- calcular_correlacoes(arquivo_excel = "C:\Users\isado\OneDrive\UFTM\Biomedicina - Isadora\GP-PGx\Artigo TCC\vcf, dados e inputs.xlsx", lista_snps = lista_snps)

# Combina os dataframes individuais em um único dataframe
Regress <- dplyr::bind_rows(resultados)

# Exporta os resultados para um arquivo Excel
write.xlsx(Regress, "Resultadocorrelação", rowNames = FALSE)


