#load packages
library(vcfR)
library(adegenet)
library(tibble)
library(dplyr)
library(openxlsx)
library(tidyr)
library(stringr)
library(clipr)
library(readxl)


#importar vcf pro R
vcfCYP2C18_1KG <- read.vcfR(file.choose())

#extrair genotype data em dataframe
gt <- extract.gt(vcfCYP2C18_1KG, element = "GT")

gt2 <- as.data.frame(gt)

gt2 <- gt2 %>% rownames_to_column(var = "SNPs")
class(gt2$SNPs)

#SNPs do haplótipo = rs2860840.T e o rs11188059.G
SNPs_filtrados <- gt2 %>% 
  filter(SNPs %in% c('rs11188059', 'rs2860840'))

#transpor para depois adicionar populações
SNPs_filtrados2 <- as.data.frame(t(SNPs_filtrados))
SNPs_filtrados2 <- tibble::rownames_to_column(SNPs_filtrados2,"ID")

colnames(SNPs_filtrados2) <- c("ID", "rs11188059", "rs2860840")
SNPs_filtrados2 <- SNPs_filtrados2 [-1,]

write.xlsx(SNPs_filtrados2, 'SNPs1KG.xlsx', rowNames = F)


# ----------------------- Haplo.stats ----------------------- 
library(haplo.stats)

#Separando as colunas
SNPs_separados1KG <- SNPs_filtrados2 %>% 
  separate_wider_delim(rs11188059, "|", names = c("rs11188059_1", "rs11188059_2")) %>%
  separate_wider_delim(rs2860840, "|", names = c("rs2860840_1", "rs2860840_2"))

#removi coluna "ID" (o comando pede só as colunas com os alelos)
SNPs1KGSemID <- SNPs_separados1KG
SNPs1KGSemID$ID <- NULL

SNPs1KGSemID2 <- SNPs1KGSemID      #backup pra garantir


# No haplo.em
#Trocando 0 = G / 1 = A no rs11188059
for (i in 1:nrow(SNPs1KGSemID)) {
  if (SNPs1KGSemID[i, 1] == 0) {SNPs1KGSemID[i, 1] <- "G"}}

for (i in 1:nrow(SNPs1KGSemID)) {
  if (SNPs1KGSemID[i, 1] == 1) {SNPs1KGSemID[i, 1] <- "A"}}

for (i in 1:nrow(SNPs1KGSemID)) {
  if (SNPs1KGSemID[i, 2] == 0) {SNPs1KGSemID[i, 2] <- "G"}}

for (i in 1:nrow(SNPs1KGSemID)) {
  if (SNPs1KGSemID[i, 2] == 1) {SNPs1KGSemID[i, 2] <- "A"}}


#Trocando 0 = C / 1 = T no rs2860840
for (i in 1:nrow(SNPs1KGSemID)) {
  if (SNPs1KGSemID[i, 3] == 0) {SNPs1KGSemID[i, 3] <- "C"}}

for (i in 1:nrow(SNPs1KGSemID)) {
  if (SNPs1KGSemID[i, 3] == 1) {SNPs1KGSemID[i, 3] <- "T"}}

for (i in 1:nrow(SNPs1KGSemID)) {
  if (SNPs1KGSemID[i, 4] == 0) {SNPs1KGSemID[i, 4] <- "C"}}

for (i in 1:nrow(SNPs1KGSemID)) {
  if (SNPs1KGSemID[i, 4] == 1) {SNPs1KGSemID[i, 4] <- "T"}}


result.haplo <- haplo.em(as.matrix(SNPs1KGSemID), locus.label = c('rs11188059', 'rs2860840'), miss.val=NA)

resultado1KG <- summary(result.haplo)

write.xlsx(resultado1KG, 'resultado1KG.xlsx', rowNames = F)


# ----------------------- Próximo passo: Cálculo de frequências -----------------------

#input da tabela input freq
POP1KG <- read_xlsx(choose.files(), sheet = "1KGP")


#Criar um vetor com o nome de todas as populações. 
lista1KG <- c ('LWK', 'GWD',                                    #'ESN', 'YRI', 'MSL' = freq 0
               'ACB', 'ASW', 'CLM', 'MXL', 'PUR', 'PEL',
               'TSI', 'IBS', 'GBR', 'CEU', 'FIN',
               'PJL', 'GIH', 'ITU', 'STU', 'BEB',
               'CDX', 'KHV', 'CHS', 'CHB', 'JPT')

POP1KG$geno <- apply(POP1KG[,3:4], 1, paste, collapse = ' ')

POP1KGP <- POP1KG[,c(2,5)]


pop_genind <- df2genind(X = POP1KGP, pop = POP1KGP$POP, sep = ' ', ploidy = 2, ncode = 2) #converte o bando de dados que temos em genind 
pop_genpop <- genind2genpop(pop_genind) #converte o genind em genpop 
freq <- makefreq (pop_genpop, quiet = FALSE, missing = NA, truenames = TRUE) #calcula a frequencia da populaçao

freq <- as.data.frame(freq)

write.xlsx(freq, 'freq1KG.xlsx', colNames = TRUE, rowNames = TRUE)



